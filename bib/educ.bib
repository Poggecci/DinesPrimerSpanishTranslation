   
%%% S-V LNCS   #895 Ibrahim (ed)       1995,
%%% S-V LNCS   #750 Diaz-Herrera (ed.) 1994, 
%%% S-V LNCS   #640 Sledge (ed)        1992,
%%% S-V LNCS   #536 Tomayko (ed)       1991, 
%%% S-V LNCS   #423 Deimel (ed)        1990,
%%% S-V LNCS   #376 Gibbs (ed)         1989 

%%% Recently Tracy Hall, Dave Pitt, and Colin Myers published a collection of
%%% papers entitled "The Responsible Software Engineer: Selected Reading in IT
%%% Professionalism" also Springer Verlag, but 1996.
Title
                  
        
@proceedings{educ:se:conf:naur69,
EDITOR       = "P. Naur and B. Randall",
TITLE        = "{Software engineering: The Garmisch Conference}",
ORGANIZATION = "NATO Science Committee, Brussels",
YEAR         = "1969",
NOTE         = ""} 


@book{gibbs87,
EDITOR       = "R.E. Fairley and N.E. Gibbs",
TITLE        = "{Software engineering education The educational needs
		  of the software community}", 
PUBLISHER    = "Springer-Verlag",
ADDRESS = "New York, N.Y. and Berlin",
PAGES        = "14+439",
YEAR         = "1987",
NOTE         = "\Software engineering education workshop,
		  Carnegie-Mellon University"}


@book{educ:hall96,
AUTHOR       = "Tracy Hall and Dave Pitt and Colin Myers",
TITLE        = "{The Responsible Software Engineer: Selected Reading in IT
                 Professionalism}",
PUBLISHER    = "Springer-Verlag",
ADDRESS      = "Berlin, Germany",
SERIES       = "Lecture Notes in Computer Science LNCS",
YEAR         = "1996",
NOTE         = ""}%%%%\dbabstract{.} \dbkey{}


@proceedings{educ:se:conf:sei89,
EDITOR       = "Deimel",
TITLE    = "{Software Engineering Education; SEI Conference; 1989}",
PUBLISHER    = "Springer-Verlag",
ADDRESS      = "Berlin, Germany",
ORGANIZATION = "SEI/CMU",
SERIES       = "Lecture Notes in Computer Science LNCS\,\#\,376",
YEAR         = "1989",
NOTE         = ""} 

@proceedings{educ:se:conf:sei90,
EDITOR       = "Deimel",
TITLE    = "{Software Engineering Education; SEI Conference; 1990}",
PUBLISHER    = "Springer-Verlag",
ADDRESS      = "Berlin, Germany",
ORGANIZATION = "SEI/CMU",
SERIES       = "Lecture Notes in Computer Science LNCS\,\#\,423",
YEAR         = "1990",
NOTE         = ""} 


@proceedings{educ:se:conf:nz96,
EDITOR       = "M. Purvis",
TITLE        = "{International Conference Software Engineering:
		  Education and Practice; Dunedin, New Zealand}",
PUBLISHER    = "IEEE Comput. Soc. Press",
ADDRESS      = "Los Alamitos, CA, USA",
ORGANIZATION = "SEI/CMU",
YEAR         = "1996",
NOTE         = "\dbabstract{The following topics were dealt with:
		  software engineering educational 
              courses; databases 
                   and data modeling; formal methods; estimation;
		  measurement and quality; programming; 
                   software tools; processes and models; and user
		  interfaces.} \dbkey{computer science education;
		  database management 
		  systems; educational courses; software 
                   engineering}"}


@proceedings{educ:se:conf:sei91,
EDITOR       = "J.E. Tomayko",
TITLE    = "{Software Engineering Education; SEI Conference;
                Pittsburgh, PA, USA 1991}",
PUBLISHER    = "Springer-Verlag",
ADDRESS      = "Berlin, Germany",
ORGANIZATION = "SEI/CMU",
SERIES       = "Lecture Notes in Computer Science LNCS\,\#\,536",
YEAR         = "1991",
NOTE         = "\dbabstract{The following topics were dealt with:
		  software project courses; software engineering
		  training in 
                  government and industry; software engineering
		  curriculum issues; teaching styles; teaching 
                  software design; real time systems and software
		  tools; and developing software engineering 
                  expertise.} \dbkey{computer science education;
		  educational computing; educational courses; human
		  factors; project 
                  engineering; software engineering; 
                  systems analysis; 
		  teaching}"} 


@proceedings{educ:se:conf:sei92,
EDITOR       = "C. Sledge",
TITLE    = "{Software Engineering Education. SEI Conference}",
PUBLISHER    = "Springer-Verlag",
ADDRESS      = "Berlin, Germany",
ORGANIZATION = "SEI/CMU",
SERIES       = "Lecture Notes in Computer Science LNCS\,\#\,690",
YEAR         = "1992",
NOTE         = "\dbabstract{he following topics were dealt with:
		  software 
engineering education in 1990s; 
                 industry-oriented courses and software reuse;
industry requirements for education; formal 
                 methods and engineering instruction; educating
practitioners; integrating software engineering; 
                 laboratory and project experiences; corporate
experiences; and engineering paradigms.} \dbkey{computer science
		  education; educational courses; 
formal specification; formal verification; 
                 software engineering; software reusability}"}


@proceedings{educ:se:conf:sei95,
EDITOR       = "R.L. Ibrahim",
TITLE    = "{Software Engineering Education; 8th SEI CSEE
		  Conference; New Orleans, LA, USA}",
PUBLISHER    = "Springer-Verlag",
SERIES       = "Lecture Notes in Computer Science LNCS\,\#\,895",
ADDRESS      = "Berlin, Germany",
ORGANIZATION = "SEI",
YEAR         = "1995",
NOTE         = "\dbabstract{The following topics were dealt with:
		  software engineering education; teaching goals; 
                  curriculum issues; software process teaching;
		  software engineering in special domains; 
                  software requirements and design education; people
		  management skills; and computer use in 
                  SE education.} \dbkey{computer aided instruction;
		  computer science education; human factors; human
		  resource 
                  management; software engineering; teaching}"}



@inproceedings{educ:se:conf:roy96,
AUTHOR       = "C.G. Roy",
TITLE    = "{Curriculum design: methodologies and life cycles}",
BOOKTITLE    = "{Proceedings. 1996 International Conference Software
		  Engineering: Education and Practice; Dunedin, New
		  Zealand}", 
PUBLISHER    = "\cite{educ:se:conf:nz96}",
EDITOR       = "M. Purvis",
PAGES        = "491-3",
YEAR         = "1996",
NOTE         = "\dbabstract{While it can be generally accepted that
		  curriculum 
design is a key issue in software engineering 
                education it is not so clear what constitutes its
essential ingredients and to what extent specific 
                methods and process models should play in its
design. The tasks set for this workshop included: 
                what degree of exposure to various methodologies is
necessary for student understanding; is 
                more necessarily better; are life cycle models
adequate process representations; and is 
                programming overemphasized.} \dbkey{computer science
		  education; educational courses; software
		  engineering}"} 

@inproceedings{educ:se:conf:da96,
AUTHOR       = "D. Andrews",
TITLE    = "{Formal methods and software development}",
BOOKTITLE    = "{Proceedings. 1996 International Conference Software
		  Engineering: Education and Practice; Dunedin, New
		  Zealand}",
EDITOR       = "M. Purvis",
PUBLISHER    = "\cite{educ:se:conf:nz96}",
PAGES        = "106-13",
YEAR         = "1996",
NOTE         = "\dbabstract{It is possible to provide a complete
		  mathematical 
explanation of the process of software 
                development. The mathematics can be based on a few
basic concepts that are used to give the  
                semantics of a programming language and to provide
an  explanation of the various steps of a 
                development method. 
The development of executable code 
from a specification can be carried out 
                by a set of transformations 
and justified by the mathematics.} \dbkey{formal specification;
		  programming theory}"} 

@inproceedings{educ:se:conf:ec96,
AUTHOR       = "E. Chang",
TITLE    = "{A software engineering subject on system description
		  techniques}", 
BOOKTITLE    = "{Proceedings. 1996 International Conference Software
		  Engineering: Education and Practice; Dunedin, New
		  Zealand}",
EDITOR       = "M. Purvis",
PUBLISHER    = "\cite{educ:se:conf:nz96}",
PAGES        = "124-9",
YEAR         = "1996",
NOTE         = "\dbabstract{The paper describes 
a software engineering subject on 
system description techniques (SDT). This 
               course explains the system description techniques
(SDTs) for describing both the models that 
               arise from analysis as well as design. 
It is therefore 
of immense importance as a prelude to the 
               software engineering project. The students are
introduced to a wide number of techniques including 
               data oriented, process oriented, state oriented and
object oriented techniques. These techniques 
               describe somewhat different aspects of a software
system. There are a number of problems related 
               to teaching, students, lack of suitable books and
examples. The paper describes how they are 
               addressed.} \dbkey{computer aided 
            instruction; computer
		  science education; object-oriented programming;
		  software 
               engineering; systems analysis; teaching}"}

@inproceedings{educ:se:conf:delft96,
AUTHOR       = "J. van Katwijk and H.  Toetenel",
TITLE    = "{Formal and informal software engineering approaches
and tools. Software engineering education  
                 at Delft University: a formatic approach}",
BOOKTITLE    = "{Proceedings. 1996 International Conference Software
		  Engineering: Education and Practice; Dunedin, New
		  Zealand}",
EDITOR       = "M. Purvis",
PUBLISHER    = "\cite{educ:se:conf:nz96}",
PAGES        = "178-84",
YEAR         = "1996",
NOTE         = "\dbabstract{We report on our 
experiences in an attempt
		  to radically change the programming and software 
                 engineering education within 
the framework of the Informatics curriculum of 
the faculty Technical
                 Mathematics and Informatics. 
Some general issues are discussed, and an example of the
                 integration of developing a 
simple software tool, using a sound mix of formalisms and
                 pragmatism.} \dbkey{computer aided software engineering; computer science education; formal specification; program
                 verification; software tools}"}

@inproceedings{educ:se:conf:dab96,
AUTHOR       = "G. Dobbie and  G. Bartfai",
TITLE    = "{Teaching software engineering in a computer science
		  department}", 
BOOKTITLE    = "{Proceedings. 1996 International Conference Software
		  Engineering: Education and Practice; Dunedin, New
		  Zealand}",
EDITOR       = "M. Purvis",
PUBLISHER    = "\cite{educ:se:conf:nz96}",
PAGES        = "58-63",
YEAR         = "1996",
NOTE         = "\dbabstract{This
paper discusses four issues that are
		  related to 
teaching software engineering, which the 
               authors have found of 
particular relevance with respect 
to the computer science programme offered 
               by the Department of Computer Science at Victoria
University of Wellington, New Zealand. These 
               issues are programming vs. software engineering,
structured vs. object-oriented methods, 
               textbook selection and assessment of project
work. Underlying these issues is the question of 
               how industrial experience can be taught 
or simulated in 
software engineering courses. The aim of 
               this paper is to share our experiences hoping to
stimulate further discussion on how software 
               engineering can best be taught.} \dbkey{computer
		  science education; educational courses;
		  object-oriented programming; software 
               engineering}"}


@proceedings{educ:se:conf:9csee,
EDITOR       = "N.R. Mead",
TITLE    = "{Ninth Conference on Software Engineering 
Education; Daytona Beach, FL, USA}",
ORGANIZATION = "IEEE Comput. Soc. Press",
YEAR         = "1996",
NOTE         = ""}

@inproceedings{educ:se:conf:mbo96,
AUTHOR       = "M. Bulent Ozcan",
TITLE    = "{Integration of software tools in software engineering
		  education}", 
BOOKTITLE    = "{Proceedings. 
Ninth Conference on Software Engineering 
Education (Cat. No.96TB100019); Daytona Beach, FL, USA}",
PUBLISHER    = "\cite{educ:se:conf:9csee}",
PAGES        = "149-61",
YEAR         = "1996",
NOTE         = "\dbabstract{There are significant benefits to be
		  gained from promoting extensive use of software
		  tools and 
              environments in software engineering education,
		  providing that they are 
   educationally appropriate. 
              This paper describes practiceand experience of using a
		  "purpose-built" teaching support 
              environment specifically designed
to emphasise the systematic nature of the processes and tools
              involved, support for the teaching 
of a range of programming paradigms and software prototyping
              via the use of (executable) formal 
specifications. It also enables the production, 
subject to rigorous
              set of constraints of software 
systems which exhibit powerful behaviour at an early stage. This
              general model of the software 
development process can be related to the more complex, or less
              well organised facilities, to 
which students will be exposed later in their 
career. Some details of the
              curriculum components of a software 
engineering course are given. Specifics of this teaching
              support environment are described. 
Illustrative examples are also presented. They demonstrate
              how the facilities of this 
environment can be exploited to support 
concepts and principles introduced
              to the students during the study.} \dbkey{computer
		  science education; educational courses; formal
		  specification; programming environments;
              software prototyping; software tools; teaching}"}

@inproceedings{educ:se:conf:tbh96,
AUTHOR       = "T.B. Hilburn",
TITLE    = "{Software engineering-from the beginning}",
BOOKTITLE    = "{Proceedings. 
Ninth Conference on Software Engineering
		  Education; Daytona Beach, FL, USA}",
PUBLISHER    = "\cite{educ:se:conf:9csee}",
PAGES        = "29-39",
YEAR         = "1996",
NOTE         = "\dbabstract{he paper discusses ideas and techniques
		  for integrating concepts of software engineering
		  into the 
              first year of a computer 
science program. The importance
		  of introducing the student to certain 
              ``programming in the large''
concepts at an early stage is
		  argued. There is a discussion of a general 
              top down approach to teaching 
introductory Ada programming which starts
 with the use of modules
              to write programs and moves 
on to the analysis and implementation of these modules. The
              approach conveys the importance 
of specification and high level design to the development process
              and stresses the need for an 
architectural view prior to specific work on 
low level functionality and
              algorithm design. The paper 
addresses how to introduce into CS1 and CS2 type courses a
              prescribed set of software 
engineering concepts that are associated 
with estimation and planning,
              specification, design, and 
software quality issues. The paper presents 
several thoughts on the
              nature of software development 
processes that are appropriate at this level. 
In addition, the paper
              discusses a current activity 
that introduces first year students to time management and defect
              management concepts.} \dbkey{Ada; computer science
		  education; programming; software engineering;
		  teaching}"} 

@proceedings{educ:se:acm:sigcse91,
EDITOR       = "Anon",
TITLE    = "{22nd SIGCSE Technical Symposium on Computer Science
		  Education; San Antonio, TX, USA}",
ORGANIZATION = "SIGCSE Bulletin",
YEAR         = "1995",
NOTE         = "\dbabstract{The 
following topics were dealt with: 
computer science education laboratories; networking
                education using computer 
simulation; educational computing for CSE; software engineering
                education; education in 
the arts and science using computers; 
parallel programming education;
                CAI; formal techniques; 
mathematics; and education in programming 
languages, files, databases,
                algorithms, operating systems and AI.} 
\dbkey{computer science education; educational computing; educational courses; human factors;
                programming; teaching}"}

@inproceedings{educ:se:conf:cmu95,
AUTHOR       = "R.F. Coyne and B.  Bruegge and A.H.  Dutoit and D.
		  Rothenberger", 
TITLE    = "{Teaching more comprehensive model-based software
engineering: experience with Objectory's 
              use case approach}",
BOOKTITLE    = "{Software Engineering Education; 8th SEI CSEE
		  Conference; New Orleans, LA, USA}",
PUBLISHER    = "\cite{educ:se:conf:sei95}",
PAGES        = "339-74",
YEAR         = "1995",
NOTE         = "\dbabstract{This paper 
is an experience report and discussion of an experiment in
teaching and using a 
              comprehensive model-based methodology and tool
(Objectory) in a large software project. The 
              paper describes in detail 
the preparation of such an
experiment, states our assumptions during the 
              planning phase, and 
presents the results together with a
discussion of the most important issues. 
              We observed certain 
improvements in the productivity and
understanding of the students, while 
              discovering a number of non-trivial organizational and
pedagogical issues still remaining to be 
              solved (e.g. communication latency and breakdown;
project set up time; training time etc.). We 
              believe that this paper will provide valuable insights
to the reader at a number of different levels: to 
              those interested in state of the art software
engineering methodologies; to those interested in 
              Objectory per se; 
and to those interested in the issues
of introducing a sophisticated modeling 
              methodology into a pilot project involving a large
number of participants .} \dbkey{computer science education;
		  educational courses; object-oriented programming;
		  software 
              engineering; software tools; teaching}"}




@inproceedings{educ:se:conf:as95,
AUTHOR       = "P. Allen and L.  Semmens",
TITLE    = "{An integrated approach to teaching requirements
		  modelling}", 
BOOKTITLE    = "{Software Engineering Education. 8th SEI CSEE
		  Conference; New Orleans, LA, USA}",
PUBLISHER    = "\cite{educ:se:conf:sei95}",
PAGES        = "223-37",
YEAR         = "1995",
NOTE         = "\dbabstract{The 
production of a sound specification is
		  fundamental to good 
software engineering. This paper 
              introduces a conceptual 
framework for requirements modelling 
and goes on to discuss the role of
              mathematics in requirements 
specification. An example of our teaching approach using some of
              Shlaer and Mellor's (1988) 
OOA notations together with the formal specification notation Z is
              given. This example shows 
how the three perspectives: data, process 
and event can be
              represented using both 
conventional graphical techniques and 
formal notations. We describe the
              tools we use and are 
developing including a "specification 
assistant" which supports both graphical
              and formal representations 
of specifications. Examples of industrial 
practice are given. Results from
              the use of an integrated 
approach on a range of university 
courses are discussed and evaluated.} \dbkey{computer science
		  education; formal specification; object-oriented
		  programming; software tools; 
              teaching}"}


@inproceedings{educ:se:conf:pwz95,
AUTHOR       = "M. Paprzycki and R.  Wasniowski and J.   Zalewski",
TITLE    = "{Parallel and distributed computing 
          education: a software 
		  engineering approach}", 
BOOKTITLE    = "{Software Engineering Education. 8th SEI CSEE
		  Conference; New Orleans, LA, USA}",
PUBLISHER    = "\cite{educ:se:conf:sei95}",
PAGES        = "187-204",
YEAR         = "1995",
NOTE         = "\dbabstract{The paper 
discusses an approach, based on
		  software 
engineering principles, to introduce parallel 
                 and distributed computing 
into the CS curriculum. The
basic assumptions are outlined, followed 
                 by a discussion of topics 
and their implementation in
core courses. Innovations in the teaching 
                 method are also presented. 
Several examples of
exercises and assignments are given.} 
\dbkey{computer science education; parallel programming;
software engineering; teaching}"}


@proceedings{educ:se:conf:hkg93,
EDITOR       = "Anon",
TITLE    = "IFIP Transactions A (Computer Science and
		  Technology); SE Education Conf., Hong Kong",
ORGANIZATION = "IFIP",
PUBLISHER = "North Holland, Amsterdam",
YEAR         = "1993",
VOLUME = "vol.A-40",
NOTE         = ""}

@inproceedings{educ:se:conf:mck93,
AUTHOR       = "P. McKenzie",
TITLE    = "{Group work in software engineering classes}",
BOOKTITLE    = "{IFIP Transactions A (Computer Science and
		  Technology); SE Education Conf., Hong Kong}",
PUBLISHER    = "\cite{educ:se:conf:hkg93}",
PAGES        = "295-9",
YEAR         = "1993",
NOTE         = "\dbabstract{Examines how a 
CASE tool called CorVision is taught to a 
group of third year students in a
              software engineering class. 
The author describes how the practical classes 
are set up to initiate
              students into the ways of industry by: 
making students responsible for assessing part of their work
              and the benefits that accrue from 
that responsibility; getting them to work in teams to complete
              different components of the practical 
work by certain deadlines; developing a spirit of co-operation
              and engendering enthusiasm by 
recruiting students into the subject; and working through the
              associated problems which group 
work can bring about. The author then illustrates two particularly
              useful methods of presenting the 
tool to the students. The first method illustrates how an
              application is built by using a 
datashow to project running examples on to a large screen. The
              second method utilises the 
experience of people involved with the tool, 
such as a developer and a
              user describing their 
interactions with the tool.} \dbkey{computer science education;
		  software engineering; software tools}"} 

@inproceedings{educ:se:conf:b-yp93,
AUTHOR       = "R.A. Baeza-Yates and J.A.   Pino",
TITLE    = "{Visual and collaborative tools for software
engineering education}",
BOOKTITLE    = "{IFIP Transactions A (Computer Science and
		  Technology); SE Education Conf., Hong Kong}",
PUBLISHER    = "\cite{educ:se:conf:hkg93}",
PAGES        = "255-62",
YEAR         = "1993",
NOTE         = "\dbabstract{We survey visual 
and collaborative tools that can be helpful in 
software engineering
                 understanding. We analyze the 
experience of the use and impact of these tools on education,
                 proposing new ways to use them 
and future research directions, including visual programming,
                 collaborative systems, algorithm 
animation and software management.} \dbkey{computer animation;
		  computer science education; DP management;
		  educational computing; 
                 groupware; software engineering; software tools;
		  technological forecasting; visual programming}"} 

@inproceedings{educ:se:conf:torii93,
AUTHOR       = "K. Torii and K.I.   Matsumoto",
TITLE    = "{Software education should go from synthesis to analysis
		  by a measurement environment}", 
BOOKTITLE    = "{IFIP Transactions A (Computer Science and
		  Technology); SE Education Conf., Hong Kong}",
PUBLISHER    = "\cite{educ:se:conf:hkg93}",
PAGES        = "245-53",
YEAR         = "1993",
NOTE         = "\dbabstract{This paper describes 
the current state of software education in academic 
and industrial fields
                where programmers are novices and 
software development is not software "engineering." It
                argues that analysis is an important 
activity in such educational fields and that measurement is a
                key component in improving programmers' 
(or students') abilities. In this context, this paper
                proposes a measurement tool for use in 
software education.} \dbkey{computer science education; programming;
		  software metrics; software tools}"} 

@inproceedings{educ:se:conf:jri93,
AUTHOR       = "J.R. Isaac",
TITLE    = "{`Software' and `engineering': synergism possible?
		  Information-the missing link? Educational 
              implications?}",
BOOKTITLE    = "{IFIP Transactions A (Computer Science and
		  Technology); SE Education Conf., Hong Kong}",
PUBLISHER    = "\cite{educ:se:conf:hkg93}",
PAGES        = "209-17",
YEAR         = "1993",
NOTE         = "\dbabstract{Despite 
periodic criticisms, software engineering 
attempts to work towards optimal problem
              solutions through the systematic 
development of effective software-based on the adoption of
              application oriented 'engineering 
principles'. However, an in-depth analysis of the origins and
              purpose of engineering principles 
indicates that such an adoption has numerous problems. Besides,
              software engineering itself is 
going through a period of introspection-for 
example, compromising on
              the change from the emphasis on 
structured systems to object orientation, not exactly a
              'compatible' paradigm. However 
the fact that computers are essentially 'information machines'
              seems to be almost totally ignored, 
despite the advent of the Information Age, and the new
              awakening to the importance of 
information per se. The theme of this paper is 
on giving information
              its rightful role in the software 
development process, and the educational implications of this
              approach.} \dbkey{computer science education;
		  object-oriented programming; software engineering}"}
		  

@inproceedings{educ:se:conf:vaw95,
AUTHOR       = "V.E. Veraart and S.L.  Wright",
TITLE    = "{Software engineering 
education-adding process to projects: theory, practice and
		  experience}", 
BOOKTITLE    = "{Proceedings 1995 Asia Pacific Software Engineering
		  Conference; Brisbane, Qld., Australia}",
PUBLISHER    = "IEEE Comput. Soc. Press; Los Alamitos, CA, USA",
PAGES        = "148-57",
YEAR         = "1995",
NOTE         = "\dbabstract{Software process 
is an important concept in software development 
and considerable work is being
              undertaken in academia and industry 
on process issues, and particularly on process improvement. It
              is difficult to teach process concepts 
effectively in an undergraduate degree but we feel the issue is
              too important to be deferred to be 
learned in work experience and postgraduate degrees. Most
              undergraduate computing courses have 
a project component that attempts to convey some of the
              aspects of a `real life` development 
project but these can easily degenerate into (large-scale)
              programming exercises if the emphasis is on 
products and not the process-particularly of students
              have been exposed to process concepts before
 commencing the project. Many courses attempt to
              address process topics-lifecycle, 
configuration management, etc.-from a theoretical approach, but
              this serves little purpose without 
relevant hands-on experience within a realistic project context.
              Our experience indicates that when 
taught in parallel with a large-scale project 
it is often too little,
              too late. We are making the concept 
of software process central to our software development
              teaching and assessment. In order to 
illustrate the applicability in practice of what we preach, we
              are applying process improvement concept 
in the education process itself. The paper reports on our
              experience.} \dbkey{computer science education;
		  configuration management; educational courses;
		  software engineering; 
              teaching}"}

@inproceedings{educ:se:conf:green93,
AUTHOR       = "L. Green",
TITLE    = "{Putting software engineering education in its place}",
BOOKTITLE    = "{IFIP Transactions A (Computer Science and Technology); SE Education Conf., Hong Kong}",
PUBLISHER    = "\cite{educ:se:conf:hkg93}",
PAGES        = "39-46",
YEAR         = "1993",
NOTE         = "\dbabstract{This paper discusses the status of software engineering
education in the United States. Software 
              education has traditionally 
polarized to two curricula,
computer science and information technology. 
              Computer science is a discipline based in the
theoretical arena. Information technology is a 
              discipline that focuses on the 
application of software
to the solution of problems in such areas as 
              business, medicine, education, 
and communications. As the application of software has become
              more integrated with hardware, 
the discipline of software engineering is emerging. The computer
              systems developed in this 
discipline are typically embedded systems. 
Organizations that develop
              embedded systems require software 
professionals who can interact with the engineers that develop
              the hardware component of these 
systems. Therefore, these organizations are indicating to the
              universities what curricula they 
would like to see in place, particularly at the undergraduate level.
              The purpose of this paper is to 
support the notion that software engineering will eventually meet
              the needs of most organizations.} \dbkey{computer
		  science education; real-time systems; software
		  engineering}"} 

@inproceedings{educ:se:conf:db93,
AUTHOR       = "D. Bj{\o}rner",
TITLE    = "{University curricula in software technology}",
BOOKTITLE    = "{IFIP Trans. A, Comput. Sci. Technol. (Netherlands)
 Vol./Issue A-40}",
PUBLISHER    = "\cite{educ:se:conf:hkg93}",
PAGES        = "5-16",
YEAR         = "1993",
NOTE         = "\dbabstract{This article discusses 
the background for and outlines abstract and 
concrete, personal proposals for
              a Curriculum in Computation
 Sciences and Engineering-a curriculum aimed at educating problem
              domain modellers, requirements 
developers, programmers and software engineers. Four
              characteristics single out the 
present proposal: (i) the strong emphasis put 
on formal application
              domain models, free of any 
computing system implementation consideration; 
(ii) the insistance on
              the use of design calculi in the 
development of software systems; (iii) 
a clear distinction between
              programming and software engineering; 
and (iv) a strict requirement on professional candidates,
              namely that at any stage of 
computing systems development they be able 
to calculate properties of
              the system they are 
implementing based on models of the application domain and software
              specifications and designs.} \dbkey{computer science
		  education; educational courses; programming;
		  software engineering}"} 

@article{educ:acm:t:et.al.91,
AUTHOR       = "A.B.Tucker et al. ",
TITLE        = "{A summary of the ACM/IEEE-CS joint curriculum task
		  force report computing curricula 1991}", 
JOURNAL      = "Communications of the ACM",
VOLUME       = "34",
NUMBER       = "6",
PAGES        = "68-84",
YEAR         = "June 1991",
NOTE         = "\dbabstract{Presents a summary of 
the report Computing Curricula 1991, which is 
published as a separate
               document by the Association 
for computing Machinery (ACM) and the Computer Society of the
               IEEE (IEEE-CS). 
The purpose of the article is to provide a 
sufficiently complete snapshot of that
               report's content so that 
readers will have a clear sense of its 
scope, methodology, and general
               recommendations. While a 
complete curriculum design document 
is not presented here, the full
               report does have that goal. 
Readers who are interested in using these recommendations as a
               basis for curriculum 
design will therefore need to obtain 
a copy of the full report itself.} 
\dbkey{computer science education;
		  educational courses}"} 

@article{educ:acm,
AUTHOR       = "",
TITLE        = "{}",
JOURNAL      = "",
VOLUME       = "",
NUMBER       = "",
PAGES        = "",
YEAR         = "",
NOTE         = "\dbabstract{.} \dbkey{}"}


@article{educ:acm,
AUTHOR       = "",
TITLE        = "{}",
JOURNAL      = "",
VOLUME       = "",
NUMBER       = "",
PAGES        = "",
YEAR         = "",
NOTE         = "\dbabstract{.} \dbkey{}"}

@inproceedings{educ:se:conf:bar91,
AUTHOR       = "B.H. Barnes and J.B.   Rogers",
TITLE    = "{Computing curricula 1991-its implications for software
		  engineering education}", 
BOOKTITLE    = "{Software Engineering Education; SEI Conference;
                Pittsburgh, PA, USA 1991}",
PUBLISHER    = "\cite{educ:se:conf:sei91}",
PAGES        = "129-47",
YEAR         = "1991",
NOTE         = "\dbabstract{The report Computing
 Curricula 1991 contains curricula recommendations 
for baccalaureate
              programs in the area of computing. 
Its recommendations provide a uniform basis for curriculum
              design across all segments of the 
educational community-schools and colleges of engineering, arts
              and science, and liberal arts. 
The report is also the first comprehensive undergraduate curriculum
              report to be jointly prepared 
and endorsed by the Association for Computing Machinery and the
              Computer Society of the IEEE. 
The guidelines provide coverage of new and updated subject matter,
              including a detailed breakdown 
of individual lecture and laboratory topics. 
Fundamental areas of
              concern in curriculum planning 
are also addressed: program goals; course design and sequencing;
              integration of laboratory work; 
the role of programming and other related educational experiences.
              The authors consider the 
implications of the report for programs specializing in software
              engineering. The basic 
recommendations of the report are 
presented and discussed. A comparison
              of the implementation with 
the SEI Undergraduate Curriculum in 
Software Engineering is also given.} \dbkey{computer science
		  education; professional aspects; software
		  engineering; teaching}"} 

@inproceedings{educ:se:conf:bat96,
AUTHOR       = "R.L. Biddle and E.D.  Tempero",
TITLE    = "{Comparing a computing 
curriculum with the ACM/IEEE-CS recommendations}",
BOOKTITLE    = "{Proceedings. 1996 International Conference Software
		  Engineering: Education and Practice; Dunedin, New
		  Zealand}", 
PUBLISHER    = "\cite{educ:se:conf:nz96}",
PAGES        = "263-70",
YEAR         = "1996",
NOTE         = "\dbabstract{Recently 
there has been an increased emphasis 
on monitoring the structure and coverage of
               tertiary education programmes, 
and on making the results more widely available. For programmes
               in the field of computing, one 
way to achieve this is to compare the curriculum to a known
               standard. We describe our 
experience in comparing our curriculum with the ACM/IEEE-CS
               recommendations. 
We describe our method of comparison 
and interpretation, and the conclusions
               we drew. We also address 
some issues that arose in doing the 
comparison, including the length of
               the overall programme, 
and differences in core and elective material.} 
\dbkey{computer science education; societies}"}

@inproceedings{educ:se:conf:ts95,
AUTHOR       = "T. Shepard",
TITLE    = "{On teaching software verification and validation}",
BOOKTITLE    = "{Software Engineering Education. 8th SEI CSEE Conference. New Orleans, LA, USA}",
PUBLISHER    = "\cite{educ:se:conf:sei95}",
PAGES        = "375-85",
YEAR         = "1995",
NOTE         = "\dbabstract{A graduate 
course on software verification and 
validation (V\&V) that has been given three times
              is described. There is 
enough material to justify multiple 
graduate courses in the area covered by
              the course. As examples, 
distinct courses at the graduate level 
could be given on each of the
              following four topics: 
inspection and review techniques; 
approaches to testing; formal methods of
              verification; and techniques 
for ensuring that software is trustworthy 
(more reliable than can be
              measured). This makes it 
challenging to decide what to include 
in a single course. Justifications are
              given for some of the 
choices made. Choices of material for 
undergraduate curricula are even more
              difficult to make. Some 
suggestions are offered in this area. 
Experience with courses on V\&V is
              relatively thin, and the 
basis for teaching much of the material 
is rapidly evolving, so stable widely
              used curricula are still some time away.}
		  \dbkey{computer science education; educational
		  courses; program testing; program verification;
		  software 
              reliability}"}

@inproceedings{educ:se:conf:fal-p95,
AUTHOR       = "R.B. France and M.M.  Larrondo-Petrie",
TITLE    = "{Understanding the role of 
  formal specification techniques
		  in requirements engineering}", 
BOOKTITLE    = "{Software Engineering Education. 8th SEI CSEE Conference. New Orleans, LA, USA}",
PUBLISHER    = "\cite{educ:se:conf:sei95}",
PAGES        = "207-21",
YEAR         = "1995",
NOTE         = "\dbabstract{The need for 
more rigorous and systematic approaches 
to requirements engineering has led to
              considerable research on 
structured specification methods (SSMs) 
and formal specification
              techniques (FSTs). SSMs 
are based on descriptive tools that 
utilize a small set of simple,
              graphical, modeling concepts, 
while FSTs are based on mathematical modeling tools. The ease of
              use of SSMs is tempered by its 
lack of support for rigorous semantic analysis. 
On the other hand,
              FSTs provide considerable support 
for semantic analysis but are often difficult to read and
              understand. This suggests that 
SSMs and FSTs can play complementary roles in software
              specification activities. We
 describe our experiences with a class project 
that applied a
              requirements engineering process 
based on an integrated SSM and FST.} \dbkey{diagrams; formal
		  specification; systems analysis}"} 


@inproceedings{educ:clhoover95,
AUTHOR       = "C.L. Hoover",
TITLE        = "{The role of the software engineer in real-time
		  software development: an introductory course}", 
BOOKTITLE    = "{Software Engineering Education. 8th SEI CSEE
		  Conference. New Orleans, LA, USA}",
PUBLISHER    = "\cite{educ:se:conf:sei95}",
ORGANIZATION = "167-86",
YEAR         = "1995",
NOTE         = "\dbabstract{A noteworthy 
feature of the computing industry is the 
increasing demand for application specific
              software. For example, 
software to control a factory in real 
time involves timing, fault tolerance,
              and safety constraints. 
These requirements differ from those 
one would encounter in the design of a
              software interface to a 
database. Software engineers who architect 
real time systems need to know
              how to apply basic principles 
about real time computing, but there is a gap between real time
              computing theory and industrial 
engineering practice. The subject of the article is a full semester
              course: Introduction to Real Time 
Software and Systems, which bridges this gap by focusing on the
              role of the software engineer in 
real time software development. This course shows how real time
              computing theory can be incorporated 
into software engineering practice. The article describes the
              rationale, structure, and content of 
the course. It also relates the author's experiences in teaching
              the course.} \dbkey{computer 
science education; educational courses; 
real-time systems; software engineering;
              teaching}"}





@inproceedings{educ:sei:see:garlan95,
AUTHOR       = "D. Garlan and A.  Brown, A and D. Jackson and J.
		  Tomayko", 
TITLE        = "{The CMU Master of Software Engineering Core
		  Curriculum}", 
BOOKTITLE    = "{Software Engineering Education. 8th SEI CSEE
		  Conference. New Orleans, LA, USA}", 
PUBLISHER    = "\cite{educ:se:conf:sei95}",
ORGANIZATION = "",
PAGES = "65-86",
YEAR         = "1995",
NOTE         = "\dbabstract{This paper outlines the new Core
		  Curriculum of the 
Carnegie Mellon University Master
		  of 
                 Software Engineering Program. 
Unlike most MSE curricula, which typically organize their
                 courses around aspects of a 
software development lifecycle, this curriculum focuses on the
                 cross-cutting disciplines of 
modelling, problem solving, management, 
analysis and design.} \dbkey{computer science education; educational
		  courses; software engineering}"} 



@inproceedings{educ:hilburn95,
AUTHOR       = "T.B. Hilburn and I.   Hirmanpour and A.  Kornecki",
TITLE        = "{The integration of software engineering into a
		  computer science curriculum}", 
BOOKTITLE    = "{Software Engineering Education. 8th SEI CSEE
		  Conference. New Orleans, LA, USA}",
PUBLISHER    = "\cite{educ:se:conf:sei95}",
PAGES = "87-97",
ORGANIZATION = "SEI",
YEAR         = "1995",
NOTE         = "\dbabstract{The paper discusses 
ideas and techniques for integrating software engineering 
concepts and
              practices into an undergraduate computer 
science curriculum. Discussion is focused on concepts
              that are related to the following aspects 
of software engineering: the need for software engineering,
              characteristics of good software, the software 
development process, estimation and planning,
              working in teams, specification of requirements, 
software design, and software quality issues. The
              computer science curriculum at Embry-Riddle 
Aeronautical University is used as an illustrative
              example of how these concepts can be 
integrated into an undergraduate computer science program,
              from introductory computer science courses 
to a senior project course. The paper starts with a
              description of the current state of software 
engineering education. After a discussion of
              Embry-Riddle's computer science curriculum 
structure, the authors propose a set of software
              engineering concepts that should be included 
in an undergraduate program. Finally, guidelines for
              incorporating these concepts into a computer 
science curriculum are presented, and there is a
              discussion of the benefits of the integrated 
approach: the relevance of the curriculum to software
              engineering practices, the experience that 
students gain through collaboration and teamwork, and
              the satisfaction that employers show with 
graduates of such a program.} \dbkey{computer science education;
		  educational courses; software engineering;
		  teaching}"} 

@inproceedings{educ:atkinson95,
AUTHOR       = "C. Atkinson and D.   Eichmann  and C. McKay",
TITLE        = "{An evolution of a software 
             engineering curriculum}", 
BOOKTITLE    = "{Software Engineering Education. 8th SEI CSEE
		  Conference. New Orleans, LA, USA}", 
PUBLISHER    = "\cite{educ:se:conf:sei95}",
PAGES = "99-112",
ORGANIZATION = "SEI",
YEAR         = "1995",
NOTE         = "\dbabstract{Many software engineering 
master's programs, particularly in the US, are based on the SEI
               curriculum archetype published in 1987. 
The paper describes how one such program at the
               University of Houston-Clear Lake is being 
modified to accomodate developments in software
               engineering practice and to better meet 
the needs of a particular local constituency. Highlights of
               the revised program include a new 5 course 
core curriculum, four concentration areas and a two
               semester capstone experience enabling 
students to apply their knowledge to real world projects.
               The new curriculum is designed to provide 
an optimum balance between the needs of students, the
               requirements of industry and the integration 
of new technology.} \dbkey{computer science education; educational
		  courses; software engineering; teaching}"} 

@inproceedings{educ:shepard94,
AUTHOR       = "T. Shepard",
TITLE        = "{Software engineering in an undergraduate computer
		  engineering program}", 
BOOKTITLE    = "{Software Engineering Education. 7th SEI CSEE
		  Conference. San Antonio, TX, USA}",
PUBLISHER    = "\cite{educ:se:conf:sei94}",
PAGES = "23-34",
SERIES       = "Lecture Notes in Computer Science LNCS\,\#\,750",
ORGANIZATION = "SEI",
YEAR         = "1994",
NOTE         = "\dbabstract{The paper describes one way to 
include software engineering in undergraduate computer
               engineering. A description of the context is 
given, to help readers relate it to their own situations.
               The need for software engineering in all 
branches of engineering is clear, but it is difficult to find
               space in undergraduate curricula. This is 
illustrated with reference to an electrical engineering
               curriculum. A set of six software engineering 
courses is described, as are three other courses that
               are relevant to students deciding on the 
software option. Some of the factors that led to the choices
               made are discussed. Three of the software 
courses are in the core of computer engineering while
               three are taken only by students specializing 
in software.} \dbkey{computer science education; software
		  engineering}"} 

@proceedings{educ:se:conf:sei94,
EDITOR      = "J.L. Diaz-Herrera",
TITLE        = "{Software Engineering Education. 7th SEI CSEE
		  Conference. San Antonio, TX, USA}",
PUBLISHER    = "Springer-Verlag, Berlin, Germany",
ORGANIZATION = "SEI",
YEAR         = "\dbabstract{1994",
NOTE         = "The following topics were dealt with: 
undergraduate software engineering education; CASE
                 tools for teaching software design; 
project-oriented courses; software process issues;
                 implications of practitioners; industry 
influence in software engineering education; experiences in
                 academic education; teaching techniques; 
software reuse education; and industry needs} \dbkey{computer aided
		  instruction; computer science education;
                  hypermedia;
		  software engineering}"} 

@inproceedings{educ:bam94,
AUTHOR       = "D.B. Boardman and A.P.   Mathur",
TITLE        = "{A two-semester undergraduate sequence in software
engineering: architecture and experience }",
BOOKTITLE    = "{Software Engineering Education. 7th SEI CSEE Conference. San Antonio, TX, USA}",
PUBLISHER    = "\cite{educ:se:conf:sei94}",
PAGES = "5-22",
ORGANIZATION = "SEI",
YEAR         = "1994",
NOTE         = "\dbabstract{A two-semester sequence in software 
engineering has been offered to computer science
               undergraduates at Purdue University since the 
fall of 1991. An attempt was made to balance the
               teaching of theory and practice of software 
engineering and provide the students with an
               opportunity to apply some of the techniques 
learned in the classroom to a controlled development
               project. The project was selected from an 
industrial setting and the product developed was
               returned to industry. We describe the 
architecture of the offering and our experience during the
               first offering in fall 1991 and spring 1992.} 
\dbkey{computer science education; educational courses; software
		  engineering}"} 

@inproceedings{educ:coyle94,
AUTHOR       = "F.P. Coyle and E. Forest  and M.M. Tanik  and D.J.
		  Frailey", 
TITLE        = "{Meeting the needs of 
industry: SMU's Master's degree
		  program in software engineering}", 
BOOKTITLE    = "{Software Engineering Education. 7th SEI CSEE
		  Conference.  San Antonio, TX, USA}", 
PUBLISHER    = "\cite{educ:se:conf:sei94}",
PAGES = "543-54",
ORGANIZATION = "SEI",
YEAR         = "1994",
NOTE         = "\dbabstract{In response to industry demand,  
the Master's degree program in software engineering at Southern
              Methodist University (SMU) was established in  
1993. Drawing on the strengths of the university,
              the regional business community, and the 
Software Engineering Institute (SEI), SMU's curriculum
              addresses the software engineering process 
from both a technical and management perspective.
              The SMU curriculum affirms the tenet that 
software engineering must be a well-managed discipline
              supported by an underpinning of science and 
technology. The SMU program is discussed in the
              context of existing graduate programs in 
software engineering as well as SEI's recommended core
              curriculum for graduate education. In addition, 
we establish critical links between the graduate
              curriculum and business requirements by mapping 
course offerings to SEI's Capability Maturity
              Model (CMM), a framework for project management 
and quantitative control of the software
              process. These linkages form the basis for the 
program's ongoing self-evaluation with respect to
              its goals and objectives.} \dbkey{computer science
		  education; educational courses; software
		  engineering}"} 

@inproceedings{educ:ammann94,
AUTHOR       = "O. Ammann and H.   Gomaa and J.   Offutt 
       and D.  Rine and B. Sanden",
TITLE        = "{A five year perspective on software engineering
graduate programs at George Mason University}",
BOOKTITLE    = "{Software Engineering Education. 7th SEI CSEE
		  Conference.  San Antonio, TX, USA}", 
PUBLISHER    = "\cite{educ:se:conf:sei94}",
PAGES = "473-88",
ORGANIZATION = "SEI",
YEAR         = "1994",
NOTE         = "\dbabstract{This paper describes the experience 
obtained at George Mason University while developing a
               Master of Science program in software engineering. 
To date, the program has graduated over 45
               students, with a current production rate of 10 to 
15 a year. The paper also describes experience
               with a certificate program in software engineering, 
which is a software engineering specialization
               taken by Masters students in related disciplines, 
and the software engineering specialization
               within the PhD program in Information Technology. 
We discuss our courses, students, the
               successes that we have had, and the problems that 
we have faced.} \dbkey{computer science education; educational
		  courses; software engineering}"} 


@inproceedings{educ:paul94,
AUTHOR       = "J. Paul",
TITLE        = "{Alternative assessment for software engineering
		  education}", 
BOOKTITLE    = "{Software Engineering Education. 7th SEI CSEE
		  Conference. San Antonio, TX, USA}", 
PUBLISHER    = "\cite{educ:se:conf:sei94}",
PAGES = "463-72",
ORGANIZATION = "SEI",
YEAR         = "1994",
NOTE         = "\dbabstract{We present a new architecture for 
assessment that involves the integration of hypermedia with
               key requirements for advancing students' 
education. The result is an interactive system for
               assessing student competence that fosters 
individualized progress through a given software
               engineering curriculum and provides instructors 
and administrators with quantitative,
               standardized assessments of confidence, states 
of knowledge, and problem-solving ability. We
               present preliminary results of our prototype 
development effort and describe an architecture and
               rationale for such systems.} \dbkey{}"}


@inproceedings{educ:berztiss02,
AUTHOR       = "A.T. Berztiss",
TITLE        = "{Engineering principles and software engineering}",
BOOKTITLE    = "{Software Engineering Education. SEI Conference
		  1992. San Diego, CA, USA}", 
PUBLISHER    = "\cite{educ:se:conf:sei92}",
PAGES = "437-51",
ORGANIZATION = "SEI",
YEAR         = "1992",
NOTE         = "\dbabstract{The author identifies the principal  
activities of engineers, formulates twelve principles of
               engineering in general, and establishes that the 
problems of software engineering differ little from
               problems in traditional engineering. This leads 
to a discussion of software engineering education
               based on general engineering principles. Although 
the primary aim is to give improved structure to
               software engineering education, he discusses also 
the importance of computer science to software
               engineering, and shows how the concepts of 
concurrent engineering manifest themselves in
               software engineering.} \dbkey{computer science
		  education; concurrent engineering; software
		  engineering}"} 
 

@inproceedings{educ:linger92,
AUTHOR       = "R.C. Linger and R.A.  Spangler",
TITLE        = "{The IBM cleanroom software engineering technology
transfer program}", 
BOOKTITLE    = "{Software Engineering Education. 
SEI Conference 1992.
		  San Diego, CA, USA}", 
PUBLISHER    = "\cite{educ:se:conf:sei92}",
PAGES = "380-94",
ORGANIZATION = "SEI",
YEAR         = "1992",
NOTE         = "\dbabstract{Cleanroom software engineering is a 
theory-based, team-oriented process for developing
              zero-defect software with high probability. 
Cleanroom places software development under
              statistical quality control to permit scientific 
certification of product quality. Technologies applied in
              Cleanroom include box structure specification of 
user function and object architecture,
              function-theoretic design and correctness 
verification, and statistical usage testing for quality
              certification. Cleanroom management is based on 
incremental development of a pipeline of
              user-function increments that accumulate into the 
final product. The IBM Cleanroom Software
              Technology Center (CSTC) provides technology 
transfer services to IBM product laboratories and
              customers for initiating Cleanroom team operations. 
The technology transfer includes education,
              consultation, and tool development. Consultation 
support after education is a critical success factor,
              as are management commitment and team motivation. 
Experience shows Cleanroom produces
              remarkable quality results that more than offset 
the cost of technology transfer.} \dbkey{computer science education;
		  DP management; software engineering; software
		  quality; technology}"} 


@inproceedings{educ:coker92,
AUTHOR       = "S. Coker and B. Blick and L.   Green and A.  von
		  Mayrhauser", 
TITLE        = "{Corporate software engineering education for six
		  sigma: course development and assessment of 
               success}",
BOOKTITLE    = "{Software Engineering Education. 
     SEI Conference 1992.
		  San Diego, CA, USA}", 
PUBLISHER    = "\cite{educ:se:conf:sei92}",
PAGES = "360-79",
ORGANIZATION = "SEI",
YEAR         = "1992",
NOTE         = "\dbabstract{The paper describes the development 
process for a course used to help increase the level of
               maturity of software development at Motorola. The 
authors also describe the contents of the
               course and the experiences teaching it worldwide. 
The course is part of Motorola's comprehensive
               software engineering improvement program geared 
towards achieving Six Sigma quality levels.
               Course development was driven by an extensive 
requirements analysis. The requirements were
               then used to determine course topics and 
priorities, instructional sequence and course duration.
               They also report on course contents and the 
course's impact on the organization.} 
\dbkey{computer science education; educational courses; software
		  engineering}"}



@inproceedings{educ:pavlik92,
AUTHOR       = "R. Pavlik and K.  Jacobs",
TITLE        = "{Creating a software engineering 
  training program in a Level 1 organization }",
BOOKTITLE    = "{Software Engineering Education. SEI Conference
		  1992. San Diego, CA, USA}", 
PUBLISHER    = "\cite{educ:se:conf:sei92}",
PAGES = "351-9",
ORGANIZATION = "SEI",
YEAR         = "1992",
NOTE         = "\dbabstract{The Capability Maturity Model for 
Software describes a Level 1 organization as one which does
               not provide a stable environment for developing 
and maintaining software. There is a high degree
               of chaos in such organizations and the success of 
projects depends primarily on having dedicated
               managers and engineers. Formal training is usually 
nonexistent in Level 1 organizations. Starting
               a software engineering training program in a Level 
1 organization is a significant undertaking that
               requires dedication, patience, and commitment of 
resources that are traditionally not provided. The
               paper describes the process that was followed to 
establish a training program in such an
               organization.} \dbkey{computer science education;
		  software engineering; training}"} 


@inproceedings{educ:kantipudi92,
AUTHOR       = "M. Kantipudi and K.W.  
    Collier and J.S.  Collofelloand
		  S.  Medeiros", 
TITLE        = "{Software engineering course projects: failures and
		  recommendations}", 
BOOKTITLE    = "{Software Engineering Education. SEI Conference
		  1992. San Diego, CA, USA}", 
PUBLISHER    = "\cite{educ:se:conf:sei92}",
PAGES = "324-38",
ORGANIZATION = "SEI",
YEAR         = "1992",
NOTE         = "\dbabstract{There has been much written about 
successful commercial software development projects while
              failures are largely ignored. Similarly, the 
software engineering education literature contains many
              references to successful course projects, while 
academic course project failures are rarely
              described. The paper provides an analysis of 
software engineering course project failures as well as
              practical recommendations for increasing the 
chances of successful projects. The failures are
              grouped into technical, personal and management 
categories. Recommendations are based upon a
              synthesis of current approaches being adopted to 
various degrees in industry as well as personal
              experiences. Most of our non-technical 
recommendations have historically received very little
              attention in course offerings or even current 
popular software engineering texts. The paper aims to
              sensitize software engineering course instructors 
to the possible failures their project teams face
              as well as to provide them with insight into 
increasing their teams chances for success.} \dbkey{computer science
		  education; software engineering}"} 

@inproceedings{educ:lively92,
AUTHOR       = "W.M. Lively and M.  Lease",
TITLE        = "{Undergraduate Software Engineering Laboratory at
		  Texas A\&M University}", 
BOOKTITLE    = "{Software Engineering Education. SEI Conference
		  1992. San Diego, CA, USA}", 
PUBLISHER    = "\cite{educ:se:conf:sei92}",
PAGES = "315-23",
ORGANIZATION = "SEI",
YEAR         = "1002",
NOTE         = "\dbabstract{The Undergraduate Software Engineering
 Laboratory has been funded by the National Science
              Foundation and is being created to provide computer 
science students hands-on experience with
              the tools and techniques used in modern software 
engineering. Each student receives experience in
              high-level system design and individual feedback 
about how their designs might be improved. To
              broaden the students' experience with computer 
hardware (which to this point has been dominated
              by personal computers), the equipment in the lab 
consists of state-of-the-art Unix workstations
              connected to a local-area network. The article 
overviews the laboratory exercises and projects
              assigned to the students. The successes and failures 
are discussed with insights on how to
              improve such a software engineering laboratory. 
Overall the authors attempt to partially answer
              the question: How do you infuse structure and 
technology into the teaching of practical software
              engineering?.} \dbkey{computer science education;
		  educational courses; software engineering; student
		  laboratory}"} 


@inproceedings{educ:bailor92,
AUTHOR       = "P.D. Bailor and T.C.   Hartrum",
TITLE        = "{Educating model-based software engineers}",
BOOKTITLE    = "{Software Engineering Education. SEI Conference
		  1992. San Diego, CA, USA}", 
PUBLISHER    = "\cite{educ:se:conf:sei92}",
PAGES = "290-7",
ORGANIZATION = "SEI",
YEAR         = "1992",
NOTE         = "\dbabstract{The authors describe the role of MBSD 
(model-based software development) in software
               engineering education from two perspectives. The 
first perspective involves the development of
               new 'mindsets' for software engineers, and the 
second involves a 'big picture' perspective of
               system design and engineering that corresponds 
with the mindset. They address how MBSD fits
               into the course content of software analysis and 
design, software generation and maintenance,
               and formal-based methods courses, respectively. 
They give a summary of success at
               incorporating MBSD into the curriculum.}
		  \dbkey{computer science education; educational
		  courses; software engineering}"} 



@inproceedings{educ:Garlan92,
AUTHOR       = "D. Garlan",
TITLE        = "{Formal methods for software engineers: tradeoffs in
		  curriculum design}", 
BOOKTITLE    = "{Software Engineering Education. SEI Conference
		  1992. San Diego, CA, USA}", 
PUBLISHER    = "\cite{educ:se:conf:sei92}",
PAGES = "131-42",
ORGANIZATION = "SEI",
YEAR         = "1992",
NOTE         = "\dbabstract{While formal methods are becoming 
increasingly important to software engineering, currently
                there is little consensus on how they should be 
taught. The author outlines some of the important
                dimensions of curriculum design for formal methods 
and illustrates the tradeoffs through a brief
                examination of four common course formats. He 
summarizes what he has learned from teaching
                courses in each of these formats and outlines an 
agenda of educational research that will enable
                one to teach formal methods more effectively.} 
\dbkey{computer science education; formal specification; formal verification; software engineering;
                teaching}"}




@inproceedings{educ:luginbuhl02,
AUTHOR       = "D.R. Luginbuhl and J.E.  Cardow",
TITLE        = "{Teaching software verification and validation to
		  software practitioners}", 
BOOKTITLE    = "{Software Engineering Education. SEI Conference 1992
Proceedings. San Diego, CA, USA}",
PUBLISHER    = "\cite{educ:se:conf:sei92}",
PAGES = "167-79",
ORGANIZATION = "SEI",
YEAR         = "1992",
NOTE         = "\dbabstract{The authors describe the development and 
teaching of a two-week course in software verification
               and validation (V\&V). The course is taught to 
Air Force software practitioners by faculty at the
               Air Force Institue of Technology (AFIT). By organizing 
teaching materials using a framework
               involving interrelationships of activities throughout 
the software development life cycle, they were
               able to significantly enhance the development and 
teaching of the course. Such an organization is
               logical since V\&V pervades all activities in every 
part of the life cycle.} \dbkey{computer science education;
		  educational courses; formal verification; software
		  engineering; 
               teaching}"}






@inproceedings{educ:lutz92,
AUTHOR       = "M.J. Lutz",
TITLE        = "{Formal methods and the engineering paradigm}",
BOOKTITLE    = "{Software Engineering Education. SEI Conference 1992
Proceedings. San Diego, CA, USA}",
PUBLISHER    = "\cite{educ:se:conf:sei92}",
PAGES = "121-30",
ORGANIZATION = "SEI",
YEAR         = "1992",
NOTE         = "\dbabstract{The snail's pace of formal methods
		  adoption disappoints those who believe such
		  techniques are 
               important for software engineering. The failure of
		  formal methods to have much impact is a 
               consequence of a general misunderstanding of the
		  engineering paradigm. Most formal methods 
               proponents have backgrounds in science or mathematics,
		  where the rules for adoption of a new 
               system are clear cut and unambiguous. The engineering
		  method, however, is grounded in the use 
               and application of heuristics, several of which relate
		  to the application of science. The paper 
               discusses the role of formal methods in the context of
		  the engineering method. Several approaches 
               to increase the use of formal methods are proposed
		  based on this analysis.} \dbkey{computer science
		  education; formal specification; formal
		  verification; software engineering}"}  

@inproceedings{educ:bruegge92,
AUTHOR       = "B. Bruegge",
TITLE        = "{Teaching an industry-oriented software engineering course}",
BOOKTITLE    = "{Software Engineering Education. SEI Conference 1992
Proceedings. San Diego, CA, USA}",
PUBLISHER    = "\cite{educ:se:conf:sei92}",
PAGES = "65-87",
ORGANIZATION = "SEI",
YEAR         = "1992",
NOTE         = "\dbabstract{Single project courses with a large number
		  of participants are an excellent vehicle for
		  teaching 
              undergraduate students the problems of producing complex
		  software systems. The emphasis placed 
              on realistic development and delivery of a finalized
		  product enables the students to appreciate 
              software development as an engineering activity where
		  cost/benefit decisions have to be made. In 
              addition, students learn communication and project
		  management techniques that are needed in 
              many industrial settings. The author describes criteria
		  for the selection of projects that are complex 
              enough to warrant large groups of developers but can
		  still be developed in the limited time of a 
              semester. He discusses experience with different
		  software development methodologies and 
              process models, explores the problems of producing
		  consistent and complete project documentation 
              and describes an organizational and communicational
		  structure that ensures a high chance of 
              success. The discussion is based on the experience with
		  three project courses in which 12-30 
              students have designed, built and successfully delivered
		  systems between 15000 and 27000 lines 
              of code within a single semester.} \dbkey{computer
		  science education; educational courses; software
		  engineering; teaching}"} 

@inproceedings{educ:grant92,
AUTHOR       = "D.D. Grant",
TITLE        = "{Software engineering education in the 1990s-the way
		  forward}", 
BOOKTITLE    = "{Software Engineering Education. SEI Conference 1992
Proceedings. San Diego, CA, USA}",
PUBLISHER    = "\cite{educ:se:conf:sei92}",
PAGES = "11-22",
ORGANIZATION = "SEI",
YEAR         = "1992",
NOTE         = "\dbabstract{The paper discusses the future of software
engineering education in Australia in the 1990s from 
                 the perspective of the current debate on the
separation of computer science and software 
                 engineering as academic disciplines. It supports the
prevailing view that maintaining the unity of 
                 computer science and software engineering is of
critical importance.} \dbkey{computer science education; software
		  engineering}"} 

@inproceedings{educ:marchewka92,
AUTHOR       = "C.G. Marchewka",
TITLE        = "{Teaching software engineering for real-time design}",
BOOKTITLE    = "{Software Engineering Education; SEI Conference;
                Pittsburgh, PA, USA 1991}",
PUBLISHER    = "\cite{educ:se:conf:sei91}",
PAGES = "235-44",
ORGANIZATION = "SEI",
YEAR         = "1991",
NOTE         = "\dbabstract{Designing software for real-time systems
		  continues to be a challenge. In addition to
		  functional 
              requirements, real-time systems typically have strict
		  requirements in the areas of performance, 
              size, and the need for concurrency which complicates the
		  design process. The best design will 
              depend on the particular requirements of a system. A
		  designer must learn to apply principles for 
              determining which design will best fit the
		  needs. Teaching students skills in design becomes
		  more 
              difficult because of the many design issues. Although
		  software engineering principles must be 
              expanded to handle the complexity of real-time systems,
		  these principles should still be applied to 
              real-time design. Since TI develops many real-time
		  systems, TI teaches an 'introduction to real 
              time software' course to improve the design skills of
		  novice real-time designers. The author 
              describes the content of the real-time course and how
		  software engineering principles are applied 
              to real-time design. She also describes how real-time
		  design concepts are reinforced through 
              examples and exercises.} \dbkey{computer science
		  education; real-time systems; software engineering;
		  systems analysis; teaching}"} 

@inproceedings{educ:jacquot91,
AUTHOR       = "J.P. Jacquot and J.   Guyard",
TITLE        = "{Seven lessons to teach design}",
BOOKTITLE    = "{Software Engineering Education; SEI Conference;
                Pittsburgh, PA, USA 1991}",
PUBLISHER    = "\cite{educ:se:conf:sei91}",
PAGES = "195-204",
ORGANIZATION = "SEI",
YEAR         = "1991",
NOTE         = "\dbabstract{Design is probably the most important
		  topic to teach in a software engineering course, but
		  it is 
               also the most difficult. Beside trying to formalize the
		  design activity, it seems equally important, 
               from a pedagogical point of view, to understand why
		  design is hard and what its prerequisites are. 
               The authors present an analysis of actual design errors
		  found in students' projects. These errors 
               fall into seven categories. Each category is analyzed
		  in order to identify the root difficulty and to 
               suggest some pedagogic solutions.} \dbkey{computer
		  science education; software engineering; teaching}"}
		

@inproceedings{educ:mead91,
AUTHOR       = "N.R. Mead and P.K. Lawlis",
TITLE        = "{Software engineering: graduate-level courses for AFIT professional continuing education}",
BOOKTITLE    = "{Software Engineering Education; SEI Conference;
                Pittsburgh, PA, USA 1991}",
PUBLISHER    = "\cite{educ:se:conf:sei91}",
PAGES = "114-26",
ORGANIZATION = "SEI",
YEAR         = "1991",
NOTE         = "\dbabstract{The US Air Force has witnessed a shortage
		  of qualified software engineering personnel, a
		  dramatic 
              increase in the use of software across all application
		  areas, and an increasing complexity of 
              systems subsequently requiring personnel to have higher
		  software engineering skill levels. In 
              addressing these issues, several Air Force commands
		  worked with the Air Force Institute of 
              Technology (AFIT) in developing a non-command-specific
		  continuing education program in 
              software engineering. The Software Engineering Institute
		  (SEI) assisted Air Force personnel and 
              AFIT faculty and staff in defining the curriculum and
		  course content, and developing five 
              graduate-level courses in AFIT's Professional Continuing
		  Education program. The overall effort 
              extended over a period of several years, from initial
		  definition to the delivery of the first course(s). 
              The authors describe the background and results of this
		  unique collaborative effort, which included 
              AFIT, the SEI, and SEI resident affiliates.}
		  \dbkey{aerospace computing; computer science
		  education; educational computing; educational
		  courses; 
              military computing; software engineering}"}


@inproceedings{educ:shaw91,
AUTHOR       = "M. Shaw and J.E. Tomayko",
TITLE        = "{Models for undergraduate project courses in software
		  engineering}", 
BOOKTITLE    = "{Software Engineering Education; SEI Conference;
                Pittsburgh, PA, USA 1991}",
PUBLISHER    = "\cite{educ:se:conf:sei91}",
PAGES = "33-71",
ORGANIZATION = "SEI",
YEAR         = "1991",
NOTE         = "\dbabstract{The software engineering course provides
		  undergraduates with an opportunity to learn
		  something 
              about real-world software development. Since software
		  engineering is far from being a mature 
              engineering discipline, it is not possible to define a
		  completely satisfactory syllabus. Content with a 
              sound basis is in short supply, and the material most
		  often taught is at high risk of becoming 
              obsolete within a few years. Undergraduate software
		  engineering courses are now offered in more 
              than 100 universities. However, there is not yet
		  consensus on the scope and form of the course. 
              The two major decisions an instructor faces are the
		  balance between technical and management 
              topics and the relation between the lecture and project
		  components. The authors discuss these two 
              decisions, with support from sample syllabi and survey
		  data on course offerings in the US and 
              Canada. They also offer some advice on the management of
		  a project-oriented course.} \dbkey{computer science
		  education; human factors; software engineering;
		  teaching}"} 


@inproceedings{educ:se:conf:tomyako95,
AUTHOR       = "Tomayko",
TITLE        = "{Carnegie Mellon's software development studio: a five
		  year retrospective}", 
BOOKTITLE    = "{Software Engineering Education; 8th SEI CSEE
		  Conference; New Orleans, LA, USA}",
PAGES        = "119-29",
PUBLISHER    = "\cite{educ:se:conf:sei95}",
ORGANIZATION = "SEI",
YEAR         = "1995",
NOTE         = "\dbabstract{The Software Development Studio is the
		  centerpiece of Carnegie Mellon`s Master of Software 
              Engineering Curriculum. It represents 40 per cent of the
		  course units students spend in the 
              program. The Studio has continuously evolved since its
		  prototype in the spring and summer of 1990. 
              The lessons learned about organization, projects, and
		  other issues are the subject of the paper. The 
              use of a well established development process, a matrix
		  organization, and one on one mentoring 
              give the highest return on investment. This is being
		  written as the seventh class of students 
              prepare to enter the Carnegie Mellon University (CMU)
		  Master of Software Engineering (MSE) 
              Program. The program is a joint effort of the School of
		  Computer Science and the Software 
              Engineering Institute at CMU. The curriculum for the MSE
		  has continuously evolved since its 
              inception, though there have been no major changes for
		  two years. The concept based core 
              curriculum, representing 30 per cent of the units
		  required for the degree, is documented by D. 
              Garlan et al. (1995). The prototype offering of the
		  Studio course, 40 per cent of the units students 
              take, is described by J.E. Tomayko (1991). The paper
		  presents the lessons learned in the five 16 
              month Studio offerings since then. Twelve projects, some
		  of which were continuations of previous 
              projects, staffed by just under 70 students, form the
		  database from which the information presented 
              is drawn.} \dbkey{computer science education;
		  educational courses; project management; software
		  engineering; 
              teaching}"}
